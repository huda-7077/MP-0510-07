generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  email          String         @unique
  fullname       String
  password       String
  profilePicture String?
  referralCode   String         @unique
  role           Role           @default(USER)
  inviter        Referral?      @relation("UserInvitee")
  invitedUsers   Referral[]     @relation("UserInviter")
  coupons        Coupon[]       @relation("UserCoupons")
  points         Point[]        @relation("UserPoints")
  isDeleted      Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  transactions   Transaction[]
  events         Event[]
  reviews        Review[]
  notifications  Notification[]
  organizers     Organizer?     @relation("Organizers")

  @@map("users")
}

enum Role {
  ADMIN
  USER
  ORGANIZER
}

model Organizer {
  id             Int       @id @default(autoincrement())
  userId         Int       @unique
  governmentId   String
  companyName    String    @unique
  companyWebsite String
  companyAddress String
  companyRole    String
  details        String    @db.Text()
  acceptedAt     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation("Organizers", fields: [userId], references: [id])

  @@map("organizers")
}

model Reward {
  id           Int      @id @default(autoincrement())
  couponsValue Int      @default(10000)
  pointsValue  Int      @default(10000)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("rewards")
}

model Point {
  id        Int      @id @default(autoincrement())
  userId    Int
  points    Int
  expiredAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation("UserPoints", fields: [userId], references: [id])

  @@map("points")
}

model Referral {
  id        Int      @id @default(autoincrement())
  inviterId Int
  inviteeId Int      @unique
  createdAt DateTime @default(now())
  inviter   User     @relation("UserInviter", fields: [inviterId], references: [id])
  invitee   User     @relation("UserInvitee", fields: [inviteeId], references: [id])

  @@map("referrals")
}

model Event {
  id                Int             @id @default(autoincrement())
  userId            Int
  user              User            @relation(fields: [userId], references: [id])
  eventCategoriesId Int
  eventCategory     EventCategories @relation(fields: [eventCategoriesId], references: [id])
  title             String
  description       String          @db.Text()
  full_description  String          @db.Text()
  thumbnail         String
  price             Int
  startDate         DateTime
  endDate           DateTime
  avaliableSeats    Int
  location          String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?
  transactions      Transaction[]
  vouchers          Voucher[]
  reviews           Review[]

  @@map("events")
}

model EventCategories {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  events      Event[]

  @@map("event_categories")
}

model Transaction {
  id           Int               @id @default(autoincrement())
  userId       Int
  user         User              @relation(fields: [userId], references: [id])
  eventId      Int
  event        Event             @relation(fields: [eventId], references: [id])
  couponId     Int?
  coupon       Coupon?           @relation(fields: [couponId], references: [id])
  voucherId    Int?
  voucher      Voucher?          @relation(fields: [voucherId], references: [id])
  status       TransactionStatus
  paymentProof String
  pointsUsed   Int
  totalPrice   Int
  quantity     Int
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  expiresAt    DateTime

  @@map("transactions")
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELED
  REFUNDED
}

model Coupon {
  id            Int           @id @default(autoincrement())
  userId        Int
  code          String        @unique
  discountValue Int
  isUsed        Boolean       @default(false)
  expiresAt     DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation("UserCoupons", fields: [userId], references: [id])
  transactions  Transaction[]

  @@map("coupons")
}

model Voucher {
  id            Int           @id @default(autoincrement())
  eventId       Int
  event         Event         @relation(fields: [eventId], references: [id])
  code          String
  discountValue Int
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  transactions  Transaction[]

  @@map("vouchers")
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int
  user      User             @relation(fields: [userId], references: [id])
  type      NotificationType
  message   String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("notifications")
}

enum NotificationType {
  TRANSACTION
  PROMOTION
  INFORMATION
}
